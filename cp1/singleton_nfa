#!/usr/bin/env python2.7

# Kyle Williams and Thomas Franceschi

import sys

class NFA(object):
	def __init__(self, states, alphabet, start, accept, transitions):
		self.states = states
		self.alphabet = alphabet
		self.start = start
		self.accept = accept

		# check for valid transitions before adding transitions dict to nfa object
		for transition in transitions:
			if transition[0] not in self.states:
				print("Error: " + transition[0] + " not a valid state")
				raise ValueError
			if transition[2] not in self.states:
				print("Error: " + transition[2] + " not a valid state")
				raise ValueError
			if transition[1] not in self.alphabet and transition[1] is not "&":
				print("Error: " + transition[1] + " not a valid symbol")
				raise ValueError

		self.transitions = transitions

	# add new transition
	def addTransition(self, q, a, r):
		if q not in self.states:
			print("Error: " + q + " not a valid state")
			return
		if r not in self.states:
			print("Error: " + r + " not a valid state")
			return
		if a not in self.alphabet:
			print("Error: " + a + " not a valid symbol")
			return
		self.transitions.append((q, a, r))

	# iterate over all states
	def showStates(self):
		for state in self.states:
			print state

	# iterate over all input symbols
	def showInputSymbols(self):
		for symbol in self.alphabet:
			print symbol

	# iterate over transitions out of state q
	def showTransitionsQ(self, q):
		for transition in self.transitions:
			if q == transition[0]:
				print transition

	# iterate over transitions on input symbol a
	def showTransitionsA(self, a):
		for transition in self.transitions:
			if a == transition[1]:
				print transition
				
def write_NFA(nfa):
	# write list of states
	for state in nfa.states:
		sys.stdout.write(state + " ")

	sys.stdout.write("\n")

	# write symbols in alphabet
	for symbol in nfa.alphabet:
		sys.stdout.write(symbol + " ")

	sys.stdout.write("\n")

	# write start state
	sys.stdout.write(nfa.start)

	sys.stdout.write("\n")

	# write list of accept states
	for accept in nfa.accept:
		sys.stdout.write(accept + " ")

	sys.stdout.write("\n")

	# write transitions
	for transition in nfa.transitions:
		# current state + input symbol + next state
		sys.stdout.write(transition[0] + " " + transition[1] + " " + transition[2])
		sys.stdout.write("\n")

def singleton(w):
	# create alphabet from input string
	alphabet = list(w)

	# append epsilon
	alphabet.append("&")

	# if input is empty string, make it an epsilon
	if w == " ":
		alphabet[0] = "&"

	# create list of states
	states = []
	for i in range(len(alphabet) + 1):
		q = "q" + str(i)
		states.append(q)

	# start state
	start = states[0]

	# accept state
	accept = []
	accept.append(states[len(states) - 1])

	# create transitions from alphabet and states
	transitions = []
	for i in range(len(alphabet)):
		transitions.append((states[i], alphabet[i], states[i+1]))

	# create nfa from input string
	nfa = NFA(states, alphabet, start, accept, transitions)
	return nfa;

if __name__ == "__main__":
	nfa = singleton(sys.argv[1])
	write_NFA(nfa)